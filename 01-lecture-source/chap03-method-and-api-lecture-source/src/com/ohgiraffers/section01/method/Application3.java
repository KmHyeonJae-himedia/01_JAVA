package com.ohgiraffers.section01.method;

public class Application3 {
    public static void main(String[] args) {
        /* 수업목표 : 메소드 전달 인자와 매개변수에 대해 이해하고 메소드 호출 시 사용할 수 있다. */
        /* 전달 인자(argument) : 메소드 호출 시 전달하는 값 */
        /* 매개변수(parameter) : 메소드 선언 시 전달받는 값 */
        /* 지금까지 사용한 변수는 지역변수에 해당합니다. */

        /* 변수의 종류
         * 1. 지역변수 : 메소드 내부에서 선언된 변수
         * 2. 매개변수 : 메소드 선언 시 전달받는 변수
         * 3. 전역변수 : 클래스 내부에서 선언된 변수
         * 4. 클래스 변수 : 클래스 내부에서 static 키워드로 선언된 변수
         */

        /* 지역변수는 선언한 메소드 블럭 내부에서만 사용할 수 있고, 이것을 지역변수의 유효범위(scope)라고 한다.
         * 다른 메소드간 서로 공유해야하는 값이 존재하는 경우 메소드 호출 시 괄호를 이용해서 값을 전달할 수 있습니다.
         * 이떄 전달하는 값을 전달 인자(argument)라고 하고,
         * 메소드 선언부 괄호 안에 전달 인자를 받기 위해 선언하는 변수를 매개변수(parameter)라고 합니다.
         */


        Application3 app = new Application3();

        /* 전달인자와 매개변수를 이용한 메소드 호출 */
        /* 1. 전달인자로 값 전달 테스트 */
        app.test(27);
        //app.test(); // 전달인자가 없어서 컴파일 에러 발생
        //app.test("20"); // 전달인자의 타입이 매개변수의 타입과 다르기 때문에 컴파일 에러 발생
        //app.test(27, 30, 33); // 전달인자가 매개변수보다 많아서 컴파일 에러 발생

        /* 2. 전달인자로 변수 전달 테스트 */
        /* 2-1. 변수에 저장한 값을 전달인자로 전달 */
        int age2 = 27;
        app.test(age2); // int 타입의 변수를 전달인자로 전달, 전달인자 변수의 이름은 매개변수와 같을 필요는 없습니다.

        /* 2-2. 자동형변환을 이용한 전달인자 전달 */
        byte ageByte = 27;
        app.test(ageByte); // byte 타입은 int 타입으로 자동 형변환되어 전달됩니다.

        /* 2-3. 강제형변환을 이용한 전달인자 전달 */
        long ageLong = 27;
        // app.test(ageLong); // long 타입은 int 타입으로 자동 형변환되지 않아서 컴파일 에러 발생
        app.test((int) ageLong); // long 타입을 int 타입으로 강제 형변환하여 전달합니다.

        /* 2-4 연산 결과를 전달인자로 전달 */
        app.test(27 + 3); // 연산 결과를 전달인자로 전달
    }

    public void test(int age) {
        System.out.println("당신의 나이는" + age + "세 입니다.");
    }
}
